version: '3.8'

services:
  mi-ai-service:
    build: .
    container_name: mi-ai-service-runpod
    restart: unless-stopped
    ports:
      - "8000:8000"      # Main API
      - "9090:9090"      # Prometheus metrics (optional)
    
    environment:
      # Service Configuration
      - SERVICE_NAME=Mi AI Service
      - SERVICE_VERSION=2.0.0
      - SERVICE_PORT=8000
      - SERVICE_HOST=0.0.0.0
      
      # Image Generation
      - MAX_IMAGE_SIZE=1024
      - GENERATION_TIMEOUT=300
      - MAX_CONCURRENT_GENERATIONS=3
      
      # File Storage
      - OUTPUTS_DIR=/tmp/generated_images
      - BACKUP_DIR=/workspace/backups
      - LOGS_DIR=/workspace/logs
      
      # Git Sync
      - GIT_SYNC_ENABLED=true
      - GIT_SYNC_INTERVAL=300
      - GIT_BACKUP_INTERVAL=3600
      
      # Performance
      - WORKER_PROCESSES=1
      - LOG_LEVEL=INFO
      
      # External services (override in .env)
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    
    volumes:
      # Persistent storage
      - ./logs:/workspace/mi-ai-service-runpod/logs
      - ./backups:/workspace/mi-ai-service-runpod/backups
      - generated_images:/tmp/generated_images
      
      # Configuration (read-only)
      - ./config.json:/workspace/mi-ai-service-runpod/config.json:ro
      
      # Environment file
      - ./.env:/workspace/mi-ai-service-runpod/.env:ro
    
    networks:
      - mi-ai-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s
    
    # Resource limits (adjust based on RunPod instance)
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Optional: Redis for advanced caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: mi-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mi-ai-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    profiles:
      - redis  # Enable with: docker-compose --profile redis up

  # Optional: Prometheus for monitoring (if needed)
  prometheus:
    image: prom/prometheus:latest
    container_name: mi-ai-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mi-ai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring  # Enable with: docker-compose --profile monitoring up

networks:
  mi-ai-network:
    driver: bridge
    name: mi-ai-network

volumes:
  generated_images:
    name: mi-ai-generated-images
  redis_data:
    name: mi-ai-redis-data  
  prometheus_data:
    name: mi-ai-prometheus-data

# Usage Examples:
# ==============
# 
# Basic setup:
# docker-compose up -d
#
# With Redis caching:
# docker-compose --profile redis up -d
#
# With full monitoring:
# docker-compose --profile redis --profile monitoring up -d
#
# View logs:
# docker-compose logs -f mi-ai-service
#
# Restart service:
# docker-compose restart mi-ai-service
#
# Update and restart:
# docker-compose pull && docker-compose up -d
#
# Cleanup:
# docker-compose down
# docker-compose down -v  # Remove volumes too
